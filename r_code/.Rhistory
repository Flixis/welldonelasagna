install.packages(c("glue", "rlang"))
library(flexdashboard)
library(ggplot2)
library(plotly)
library(tidyverse)
library(RMySQL)
library(DBI)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(tidyverse)
library(RMySQL)
library(DBI)
# Connect to a SQLite in-memory database
database <- dbConnect(MySQL(),
dbname = "wdl_database",
host = "localhost",
user = "user",
password = "password",
port = 3306)
dfData <- dbGetQuery(database, "SELECT * FROM discord_messages")
View(dfData)
# Query to get results for electric vehicles
result_messagespermonth<- dbGetQuery(database, "
SELECT
UserId,
Name,
COUNT(MessageId) AS TotalMessages,
DATE_FORMAT(Timestamp, '%Y-%m') AS Month
FROM
wdl_database.discord_messages
WHERE
Name IN ('theycallmeq', 'jbuwu', 'snozledozle', 'thefyreprophecy', 'joppertje','lykozen','coeus._','coeus7680')
GROUP BY
UserId, Name, DATE_FORMAT(Timestamp, '%Y-%m')
ORDER BY
DATE_FORMAT(Timestamp, '%Y-%m');
")
ggplot(result_messagespermonth, aes(x = Month, y = TotalMessages, fill = Name)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels if needed
labs(title = "Monthly Messages per User",
x = "Month",
y = "Total Messages")
plot_messagepermonth <- ggplot(result_messagespermonth, aes(x = Month, y = TotalMessages, fill = Name)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels if needed
labs(title = "Monthly Messages per User",
x = "Month",
y = "Total Messages")
ggplotly(plot_messagepermonth)
View(dfData)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(tidyverse)
library(RMySQL)
library(DBI)
# Connect to a SQLite in-memory database
database <- dbConnect(MySQL(),
dbname = "wdl_database",
host = "localhost",
user = "user",
password = "password",
port = 3306)
dfData <- dbGetQuery(database, "SELECT * FROM discord_messages")
result_messagespermonth<- dbGetQuery(database, "
SELECT
UserId,
Name,
COUNT(MessageId) AS TotalMessages,
DATE_FORMAT(Timestamp, '%Y-%m') AS Month
FROM
wdl_database.discord_messages
WHERE
Name IN ('theycallmeq', 'jbuwu', 'snozledozle', 'thefyreprophecy', 'joppertje','lykozen','coeus._','coeus7680')
GROUP BY
UserId, Name, DATE_FORMAT(Timestamp, '%Y-%m')
ORDER BY
DATE_FORMAT(Timestamp, '%Y-%m');
")
plot_messagepermonth <- ggplot(result_messagespermonth, aes(x = Month, y = TotalMessages, fill = Name)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # Rotate x-axis labels if needed
labs(title = "Monthly Messages per User",
x = "Month",
y = "Total Messages")
ggplotly(plot_messagepermonth)
result_totalmessages<- dbGetQuery(database, "
SELECT COUNT(*) as TotalMessages
FROM wdl_database.discord_messages;
")
result_mostmessages<- dbGetQuery(database, "
SELECT Name, COUNT(distinct Id) as MostMessages
FROM wdl_database.discord_messages
GROUP BY Name
ORDER BY MostMessages DESC
LIMIT 1;
")
result_nitrodistrobutionperusers<- dbGetQuery(database, "
SELECT PremiumType,
GROUP_CONCAT(DISTINCT Name ORDER BY Name SEPARATOR ', ') AS Users,
COUNT(DISTINCT Name) AS UniqueUserCount
FROM wdl_database.discord_messages
GROUP BY PremiumType;
")
ggplot(result_nitrodistrobutionperusers, aes(x = "", y = UniqueUserCount, fill = PremiumType)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Premium Type",
title = "Distribution of Premium Types Among Users")
plot_nitrodistrobutionperusers <- ggplot(result_nitrodistrobutionperusers, aes(x = "", y = UniqueUserCount, fill = PremiumType)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Premium Type",
title = "Distribution of Premium Types Among Users")
ggplotly(plot_nitrodistrobutionperusers)
plot_nitrodistrobutionperusers <- ggplot(result_nitrodistrobutionperusers, aes(x = "", y = UniqueUserCount, fill = PremiumType)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
labs(fill = "Premium Type",
title = "Distribution of Premium Types Among Users")
ggplotly(plot_nitrodistrobutionperusers)
plot_ly(result_nitrodistrobutionperusers, labels = ~PremiumType, values = ~UniqueUserCount, type = 'pie',
textinfo = 'label+percent', insidetextorientation = 'radial') %>%
layout(title = 'Distribution of Premium Types Among Users')
ggplot(result_totalmessagesperuser, aes(x = Name, y = TotalMessages)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(title = "Total Messages per User",
x = "User Name",
y = "Total Messages") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
result_totalmessagesperuser<- dbGetQuery(database, "
SELECT
Name,
COUNT(MessageId) AS TotalMessages
FROM
wdl_database.discord_messages
WHERE
Name IN ('theycallmeq', 'jbuwu', 'snozledozle', 'thefyreprophecy', 'joppertje','lykozen','coeus._','coeus7680')
GROUP BY
Name
HAVING
COUNT(MessageId) >= 100;
")
ggplot(result_totalmessagesperuser, aes(x = Name, y = TotalMessages)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(title = "Total Messages per User",
x = "User Name",
y = "Total Messages") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
plot_totalmessagesperuser <- ggplot(result_totalmessagesperuser, aes(x = Name, y = TotalMessages)) +
geom_bar(stat = "identity", fill = "blue") +
theme_minimal() +
labs(title = "Total Messages per User",
x = "User Name",
y = "Total Messages") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
ggplotly(plot_totalmessagesperuser);
plot_totalmessagesperuser <- ggplot(result_totalmessagesperuser, aes(x = Name, y = TotalMessages, fill = Name)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Total Messages per User",
x = "User Name",
y = "Total Messages") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Convert to an interactive plotly object
ggplotly(plot_totalmessagesperuser)
plot_totalmessagesperuser <- ggplot(result_totalmessagesperuser, aes(x = Name, y = TotalMessages, fill = Name)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Total Messages per User",
x = "User Name",
y = "Total Messages")
# Convert to an interactive plotly object
ggplotly(plot_totalmessagesperuser)
plot_totalmessagesperuser <- ggplot(result_totalmessagesperuser, aes(x = Name, y = TotalMessages, fill = Name)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Total Messages per User",
x = "User Name",
y = "Total Messages") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
# Convert to an interactive plotly object
ggplotly(plot_totalmessagesperuser)
word_frequencies <- dfData %>%
unnest_tokens(word, Content) %>%  # Split text into words
count(word, sort = TRUE)          # Count and sort by frequency
word_frequencies <- dfData %>%
unnest_tokens(word, Content) %>%  # Split text into words
count(word, sort = TRUE)          # Count and sort by frequency
word_frequencies <- dfData %>%
unnest_tokens(word, Content) %>%  # Split text into words
count(word, sort = TRUE)          # Count and sort by frequency
library(flexdashboard)
library(ggplot2)
library(plotly)
library(tidyverse)
library(RMySQL)
library(DBI)
library(tidytext)
word_frequencies <- dfData %>%
unnest_tokens(word, Content) %>%  # Split text into words
count(word, sort = TRUE)          # Count and sort by frequency
word_frequencies <- dfData %>%
unnest_tokens(word, Content) %>%  # Split text into words
count(word, sort = TRUE)          # Count and sort by frequency
top_words <- head(word_frequencies, 10)
print(top_words)
word_frequencies <- dfData %>%
unnest_tokens(word, Content) %>%  # Split text into words
count(word, sort = TRUE)          # Count and sort by frequency
top_words <- head(word_frequencies, 20)
print(top_words)
word_frequencies <- dfData %>%
unnest_tokens(word, Content) %>%  # Split text into words
count(word, sort = TRUE)          # Count and sort by frequency
top_words <- head(word_frequencies, 50)
print(top_words)
library(flexdashboard)
library(ggplot2)
library(plotly)
library(tidyverse)
library(RMySQL)
library(DBI)
library(tidytext)
library(wordcloud)
install.packages("RColorBrewer")
library(flexdashboard)
library(ggplot2)
library(plotly)
library(tidyverse)
library(RMySQL)
library(DBI)
library(tidytext)
library(wordcloud)
word_frequencies <- dfData %>%
unnest_tokens(word, Content) %>%  # Split text into words
count(word, sort = TRUE)          # Count and sort by frequency
top_words <- head(word_frequencies, 50)
print(top_words)
set.seed(123)  # for reproducibility
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
set.seed(123)  # for reproducibility
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
set.seed(123)  # for reproducibility
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
set.seed(123)  # for reproducibility
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark1"))
set.seed(123)  # for reproducibility
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark"))
set.seed(123)  # for reproducibility
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark3"))
set.seed(123)  # for reproducibility
wordcloud(words = top_words$word, freq = top_words$n, min.freq = 1,
max.words = 50, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
# Assuming top_words is already created and contains the top 50 words
ggplot(top_words, aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flips the coordinates to make the plot horizontal
labs(title = "Top 50 Word Frequencies",
x = "Words",
y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Adjust x-axis labels for readability
# Assuming top_words is already created and contains the top 50 words
plot_topwords <- ggplot(top_words, aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flips the coordinates to make the plot horizontal
labs(title = "Top 50 Word Frequencies",
x = "Words",
y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Adjust x-axis labels for readability
plotly(plot_topwords)
# Assuming top_words is already created and contains the top 50 words
plot_topwords <- ggplot(top_words, aes(x = reorder(word, n), y = n)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flips the coordinates to make the plot horizontal
labs(title = "Top 50 Word Frequencies",
x = "Words",
y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Adjust x-axis labels for readability
ggplotly(plot_topwords)
# Assuming top_words is already created and contains the top 50 words
plot_topwords <- ggplot(top_words, aes(x = reorder(word, n), y = n, fill = word)) +
geom_bar(stat = "identity") +
coord_flip() +  # Flips the coordinates to make the plot horizontal
scale_fill_viridis_d() +  # Use the viridis color palette for discrete data
labs(title = "Top 50 Word Frequencies",
x = "Words",
y = "Frequency") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1),  # Adjust x-axis labels for readability
legend.position = "none")  # Hide the legend
# Convert to an interactive plotly object
ggplotly(plot_topwords)
result_mostmessages<- dbGetQuery(database, "
SELECT Name, COUNT(distinct Id) as MostMessages
FROM wdl_database.discord_messages
GROUP BY Name
ORDER BY MostMessages ASC
LIMIT 1;
")
result_mostmessages<- dbGetQuery(database, "
SELECT Name, COUNT(distinct Id) as MostMessages
FROM wdl_database.discord_messages
GROUP BY Name
ORDER BY MostMessages DESC
LIMIT 1;
")
result_mostmessages<- dbGetQuery(database, "
SELECT Name, COUNT(distinct Id) as MostMessages
FROM wdl_database.discord_messages
GROUP BY Name
ORDER BY MostMessages DESC
LIMIT 1;
")
result_mostmessages<- dbGetQuery(database, "
SELECT Name, COUNT(distinct Id) as MostMessages
FROM wdl_database.discord_messages
GROUP BY Name
ORDER BY MostMessages DESC
LIMIT 1;
")
library(flexdashboard)
library(ggplot2)
library(plotly)
library(tidyverse)
library(RMySQL)
library(DBI)
library(tidytext)
library(wordcloud)
# Connect to a SQLite in-memory database
database <- dbConnect(MySQL(),
dbname = "wdl_database",
host = "localhost",
user = "user",
password = "password",
port = 3306)
dfData <- dbGetQuery(database, "SELECT * FROM discord_messages")
